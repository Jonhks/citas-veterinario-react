{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","mensajeEnviado","setMensajeEnviado","handlerState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","setTimeout","type","placeholder","onChange","Cita","eliminarCita","onClick","App","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4dc2261f.chunk.js","sourcesContent":["import {useState} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n// uuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({crearCita}) => {\n\n  // Crear el estado de las citas \n  const [cita, setCita] = useState({\n    mascota: '',\n    propietario: '',\n    fecha: '',\n    hora: '',\n    sintomas: ''\n  })\n\n  // creando el estado del error\n  const [error, setError] = useState(false);\n\n  // para dar mensaje al usuario que sus datos fueron guardados exitosamente\n\n  const [mensajeEnviado, setMensajeEnviado] = useState(false);\n\n  const handlerState = e => {\n    setCita({\n      ...cita,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  // Extraer valores de la citas\n  const {mascota, propietario, fecha, hora, sintomas} = cita;\n\n  // Cuando el usuario presione agregar cita\n\n  const submitCita = e => {\n    e.preventDefault();\n    // Validar\n\n    if(\n      mascota.trim() === '' || \n      propietario.trim() === '' || \n      fecha.trim() === '' || \n      hora.trim() === '' || \n      sintomas.trim() === '' \n    ){\n      setError(true);\n      return;\n    }\n    setError(false);\n    // Agregar un Id\n    cita.id = uuidv4();\n    // Crear una cita\n    crearCita(cita)\n    // Mostramos mensaje de éxito\n    setMensajeEnviado(true)\n    // ocultando el mensaje de éxito\n    setTimeout(() => {\n      setMensajeEnviado(false);\n    }, 3000);\n    // Limpiar Formulario\n    setCita({\n      mascota: '',\n      propietario: '',\n      fecha: '',\n      hora: '',\n      sintomas: ''\n    })\n  }\n\n  return(\n    <>\n      <h2>Crear cita</h2>\n\n      {/* {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null} */}\n      {error && <p className=\"alerta-error\">Todos los campos son obligatorios</p>}\n      {mensajeEnviado && <p className=\"alerta-enviado\">Sus datos fueron guardados con éxito!</p>}\n      <form\n        onSubmit={submitCita}\n      >\n        <label>Nombre de Mascota</label>\n        <input \n          type=\"text\" \n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre mascota\"\n          value={mascota}\n          onChange={handlerState}\n        />\n        <label>Nombre del Dueño</label>\n        <input \n          type=\"text\" \n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre del dueño de la mascota\"\n          value={propietario}\n          onChange={handlerState}\n        />\n        <label>Fecha Ingreso</label>\n        <input \n          type=\"date\" \n          name=\"fecha\"\n          className=\"u-full-width\"\n          value={fecha}\n          onChange={handlerState}\n        />\n        <label>Hora Ingreso</label>\n        <input \n          type=\"time\" \n          name=\"hora\"\n          className=\"u-full-width\"\n          value={hora}\n          onChange={handlerState}\n        />\n        <label>Síntomas</label>\n        <textarea \n          name=\"sintomas\"\n          className=\"u-full-width\"\n          placeholder=\"¿Cuales son los síntomas?\"\n          value={sintomas}\n          onChange={handlerState}\n        ></textarea>\n        <button\n          type=\"submit\"\n          className=\"u-full-width button-primary\"\n        >\n          Agregar Cita\n        </button>\n      </form>\n    </>\n  );\n};\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired\n}\n\nexport default Formulario;","import PropTypes from 'prop-types';\n\n\nconst Cita = ({\n  cita: {mascota, propietario, fecha, hora, sintomas, id},\n  eliminarCita\n}) => {\n  return (\n    <div className=\"cita\">\n      <p>Mascota: <span>{mascota}</span></p>\n      <p>Propietario: <span>{propietario}</span></p>\n      <p>fecha: <span>{fecha}</span></p>\n      <p>Hora: <span>{hora}</span></p>\n      <p>Sintomas: <span>{sintomas}</span></p>\n      <button \n        className=\"button eliminar u-full-width\"\n        onClick={() => eliminarCita(id)}\n      >Eliminar &times;</button>\n    </div>\n  );\n};\n\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired\n}\n\nexport default Cita;","import {useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  // Citas en el localStorage\n  // Estado de todas las citas\n  const [citas, setCitas] = useState(JSON.parse(localStorage.getItem('citas')) || []);\n\n\n  useEffect(() => {\n      localStorage.setItem('citas', JSON.stringify(citas))\n  }, [citas]);\n\n  // funcion que tome todas las citas actuales y agregue una nueva\n  const crearCita = cita => {\n    setCitas([\n      ...citas,\n      cita\n    ]);\n  };\n\n  // Funcion encargada de eliminar las citas\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id)\n    setCitas(nuevasCitas)\n  }\n\n  // const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas'\n \n  return (\n    <div>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            {/* <h2>{titulo}</h2> */}\n            <h2>{citas.length === 0 ? 'No hay citas' : 'Administra tus citas'}</h2>\n              {citas.map(cita => (\n                <Cita\n                  cita={cita} \n                  key={cita.id}\n                  eliminarCita={eliminarCita}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}